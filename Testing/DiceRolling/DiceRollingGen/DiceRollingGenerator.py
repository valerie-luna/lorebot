# Generated by Grammarinator 23.7.post95+g3840454

from math import inf
from grammarinator.runtime import *

class DiceRollingGenerator(Generator):


    def WHITESPACE(self, parent=None):
        with UnlexerRuleContext(self, 'WHITESPACE', parent) as rule:
            current = rule.current
            with QuantifierContext(rule, 0, 1, inf, DiceRollingGenerator._quant_sizes[0], 0) as quant0:
                while quant0():
                    with QuantifiedContext(rule):
                        current = rule.current
                        current.src += ' '
            current = rule.current
            return current

    def POSDIGIT(self, parent=None):
        with UnlexerRuleContext(self, 'POSDIGIT', parent) as rule:
            current = rule.current
            current.src += self._model.charset(current, 0, DiceRollingGenerator._charsets[1])
            return current

    def DIGIT(self, parent=None):
        with UnlexerRuleContext(self, 'DIGIT', parent) as rule:
            current = rule.current
            current.src += self._model.charset(current, 0, DiceRollingGenerator._charsets[2])
            return current

    def POINT(self, parent=None):
        with UnlexerRuleContext(self, 'POINT', parent) as rule:
            current = rule.current
            current.src += '.'
            return current

    def SS_SHADOWRUN(self, parent=None):
        with UnlexerRuleContext(self, 'SS_SHADOWRUN', parent) as rule:
            current = rule.current
            current.src += 'sr'
            return current

    def SS_OLD_SHADOWRUN(self, parent=None):
        with UnlexerRuleContext(self, 'SS_OLD_SHADOWRUN', parent) as rule:
            current = rule.current
            current.src += 'osr'
            return current

    def SS_EARTHDAWN(self, parent=None):
        with UnlexerRuleContext(self, 'SS_EARTHDAWN', parent) as rule:
            current = rule.current
            current.src += 'ed'
            return current

    def SS_GENESYS(self, parent=None):
        with UnlexerRuleContext(self, 'SS_GENESYS', parent) as rule:
            current = rule.current
            current.src += 'g:'
            return current

    def SS_STARWARS(self, parent=None):
        with UnlexerRuleContext(self, 'SS_STARWARS', parent) as rule:
            current = rule.current
            current.src += 'sw'
            return current

    def KW_TARGET(self, parent=None):
        with UnlexerRuleContext(self, 'KW_TARGET', parent) as rule:
            current = rule.current
            current.src += 't'
            return current

    def KW_INDEFINITE(self, parent=None):
        with UnlexerRuleContext(self, 'KW_INDEFINITE', parent) as rule:
            current = rule.current
            current.src += 'i'
            return current

    def KW_STACKING_EXPLOSION(self, parent=None):
        with UnlexerRuleContext(self, 'KW_STACKING_EXPLOSION', parent) as rule:
            current = rule.current
            current.src += 's'
            return current

    def KW_EXPLOSION(self, parent=None):
        with UnlexerRuleContext(self, 'KW_EXPLOSION', parent) as rule:
            current = rule.current
            current.src += 'e'
            return current

    def KW_UNSORT(self, parent=None):
        with UnlexerRuleContext(self, 'KW_UNSORT', parent) as rule:
            current = rule.current
            current.src += 'unsort'
            return current

    def KW_KEEP(self, parent=None):
        with UnlexerRuleContext(self, 'KW_KEEP', parent) as rule:
            current = rule.current
            current.src += 'k'
            return current

    def KW_LIMIT(self, parent=None):
        with UnlexerRuleContext(self, 'KW_LIMIT', parent) as rule:
            current = rule.current
            current.src += 'l'
            return current

    def COMMENT(self, parent=None):
        with UnlexerRuleContext(self, 'COMMENT', parent) as rule:
            current = rule.current
            current.src += '!'
            return current

    def OPENBRACKET(self, parent=None):
        with UnlexerRuleContext(self, 'OPENBRACKET', parent) as rule:
            current = rule.current
            current.src += '('
            return current

    def CLOSEBRACKET(self, parent=None):
        with UnlexerRuleContext(self, 'CLOSEBRACKET', parent) as rule:
            current = rule.current
            current.src += ')'
            return current

    def SQUARE_OPEN(self, parent=None):
        with UnlexerRuleContext(self, 'SQUARE_OPEN', parent) as rule:
            current = rule.current
            current.src += '['
            return current

    def SQUARE_CLOSED(self, parent=None):
        with UnlexerRuleContext(self, 'SQUARE_CLOSED', parent) as rule:
            current = rule.current
            current.src += ']'
            return current

    def PLUS(self, parent=None):
        with UnlexerRuleContext(self, 'PLUS', parent) as rule:
            current = rule.current
            current.src += '+'
            return current

    def MINUS(self, parent=None):
        with UnlexerRuleContext(self, 'MINUS', parent) as rule:
            current = rule.current
            current.src += '-'
            return current

    def MULTIPLY(self, parent=None):
        with UnlexerRuleContext(self, 'MULTIPLY', parent) as rule:
            current = rule.current
            current.src += '*'
            return current

    def DIVIDE(self, parent=None):
        with UnlexerRuleContext(self, 'DIVIDE', parent) as rule:
            current = rule.current
            current.src += '/'
            return current

    def MODULO(self, parent=None):
        with UnlexerRuleContext(self, 'MODULO', parent) as rule:
            current = rule.current
            current.src += '%'
            return current

    def COLON(self, parent=None):
        with UnlexerRuleContext(self, 'COLON', parent) as rule:
            current = rule.current
            current.src += ':'
            return current

    def POSITIVE_INTEGER(self, parent=None):
        with UnlexerRuleContext(self, 'POSITIVE_INTEGER', parent) as rule:
            current = rule.current
            self.POSDIGIT(parent=current)
            with QuantifierContext(rule, 0, 0, inf, DiceRollingGenerator._quant_sizes[1], 0) as quant0:
                while quant0():
                    with QuantifiedContext(rule):
                        current = rule.current
                        self.DIGIT(parent=current)
            current = rule.current
            return current

    def DECIMAL(self, parent=None):
        with UnlexerRuleContext(self, 'DECIMAL', parent) as rule:
            current = rule.current
            with AlternationContext(rule, 0, DiceRollingGenerator._alt_sizes[0], 0, DiceRollingGenerator._alt_conds[0]) as alt0:
                current = rule.current
                choice0 = alt0()
                if choice0 == 0:
                    with QuantifierContext(rule, 0, 1, inf, DiceRollingGenerator._quant_sizes[1], 0) as quant0:
                        while quant0():
                            with QuantifiedContext(rule):
                                current = rule.current
                                self.DIGIT(parent=current)
                    current = rule.current
                elif choice0 == 1:
                    with QuantifierContext(rule, 1, 1, inf, DiceRollingGenerator._quant_sizes[1], 1) as quant1:
                        while quant1():
                            with QuantifiedContext(rule):
                                current = rule.current
                                self.DIGIT(parent=current)
                    current = rule.current
                    current.src += '.'
                    with QuantifierContext(rule, 2, 1, inf, DiceRollingGenerator._quant_sizes[1], 0) as quant2:
                        while quant2():
                            with QuantifiedContext(rule):
                                current = rule.current
                                self.DIGIT(parent=current)
                    current = rule.current
            current = rule.current
            return current

    def DICE(self, parent=None):
        with UnlexerRuleContext(self, 'DICE', parent) as rule:
            current = rule.current
            with AlternationContext(rule, 0, DiceRollingGenerator._alt_sizes[1], 0, DiceRollingGenerator._alt_conds[0]) as alt0:
                current = rule.current
                current.src += ['d', 'D'][alt0()]
            current = rule.current
            return current

    def ANYTHING(self, parent=None):
        with UnlexerRuleContext(self, 'ANYTHING', parent) as rule:
            current = rule.current
            current.src += self._model.charset(current, 0, DiceRollingGenerator._charsets[0])
            return current

    def WHITESPACE_GENESYS(self, parent=None):
        with UnlexerRuleContext(self, 'WHITESPACE_GENESYS', parent) as rule:
            current = rule.current
            with QuantifierContext(rule, 0, 1, inf, DiceRollingGenerator._quant_sizes[0], 0) as quant0:
                while quant0():
                    with QuantifiedContext(rule):
                        current = rule.current
                        current.src += ' '
            current = rule.current
            return current

    def YELLOW(self, parent=None):
        with UnlexerRuleContext(self, 'YELLOW', parent) as rule:
            current = rule.current
            with AlternationContext(rule, 0, DiceRollingGenerator._alt_sizes[1], 0, DiceRollingGenerator._alt_conds[0]) as alt0:
                current = rule.current
                current.src += ['y', 'Y'][alt0()]
            current = rule.current
            return current

    def GREEN(self, parent=None):
        with UnlexerRuleContext(self, 'GREEN', parent) as rule:
            current = rule.current
            with AlternationContext(rule, 0, DiceRollingGenerator._alt_sizes[1], 0, DiceRollingGenerator._alt_conds[0]) as alt0:
                current = rule.current
                current.src += ['g', 'G'][alt0()]
            current = rule.current
            return current

    def BLUE(self, parent=None):
        with UnlexerRuleContext(self, 'BLUE', parent) as rule:
            current = rule.current
            with AlternationContext(rule, 0, DiceRollingGenerator._alt_sizes[1], 0, DiceRollingGenerator._alt_conds[0]) as alt0:
                current = rule.current
                current.src += ['b', 'B'][alt0()]
            current = rule.current
            return current

    def BLACK(self, parent=None):
        with UnlexerRuleContext(self, 'BLACK', parent) as rule:
            current = rule.current
            with AlternationContext(rule, 0, DiceRollingGenerator._alt_sizes[1], 0, DiceRollingGenerator._alt_conds[0]) as alt0:
                current = rule.current
                current.src += ['k', 'K'][alt0()]
            current = rule.current
            return current

    def RED(self, parent=None):
        with UnlexerRuleContext(self, 'RED', parent) as rule:
            current = rule.current
            with AlternationContext(rule, 0, DiceRollingGenerator._alt_sizes[1], 0, DiceRollingGenerator._alt_conds[0]) as alt0:
                current = rule.current
                current.src += ['r', 'R'][alt0()]
            current = rule.current
            return current

    def PURPLE(self, parent=None):
        with UnlexerRuleContext(self, 'PURPLE', parent) as rule:
            current = rule.current
            with AlternationContext(rule, 0, DiceRollingGenerator._alt_sizes[1], 0, DiceRollingGenerator._alt_conds[0]) as alt0:
                current = rule.current
                current.src += ['p', 'P'][alt0()]
            current = rule.current
            return current

    def SUCCESS(self, parent=None):
        with UnlexerRuleContext(self, 'SUCCESS', parent) as rule:
            current = rule.current
            with AlternationContext(rule, 0, DiceRollingGenerator._alt_sizes[1], 0, DiceRollingGenerator._alt_conds[0]) as alt0:
                current = rule.current
                current.src += ['s', 'S'][alt0()]
            current = rule.current
            return current

    def FAILURE(self, parent=None):
        with UnlexerRuleContext(self, 'FAILURE', parent) as rule:
            current = rule.current
            with AlternationContext(rule, 0, DiceRollingGenerator._alt_sizes[1], 0, DiceRollingGenerator._alt_conds[0]) as alt0:
                current = rule.current
                current.src += ['f', 'F'][alt0()]
            current = rule.current
            return current

    def ADVANTAGE(self, parent=None):
        with UnlexerRuleContext(self, 'ADVANTAGE', parent) as rule:
            current = rule.current
            with AlternationContext(rule, 0, DiceRollingGenerator._alt_sizes[1], 0, DiceRollingGenerator._alt_conds[0]) as alt0:
                current = rule.current
                current.src += ['a', 'A'][alt0()]
            current = rule.current
            return current

    def THREAT(self, parent=None):
        with UnlexerRuleContext(self, 'THREAT', parent) as rule:
            current = rule.current
            with AlternationContext(rule, 0, DiceRollingGenerator._alt_sizes[1], 0, DiceRollingGenerator._alt_conds[0]) as alt0:
                current = rule.current
                current.src += ['t', 'T'][alt0()]
            current = rule.current
            return current

    def TRIUMPH(self, parent=None):
        with UnlexerRuleContext(self, 'TRIUMPH', parent) as rule:
            current = rule.current
            with AlternationContext(rule, 0, DiceRollingGenerator._alt_sizes[1], 0, DiceRollingGenerator._alt_conds[0]) as alt0:
                current = rule.current
                current.src += ['i', 'I'][alt0()]
            current = rule.current
            return current

    def DESPAIR(self, parent=None):
        with UnlexerRuleContext(self, 'DESPAIR', parent) as rule:
            current = rule.current
            with AlternationContext(rule, 0, DiceRollingGenerator._alt_sizes[1], 0, DiceRollingGenerator._alt_conds[0]) as alt0:
                current = rule.current
                current.src += ['d', 'D'][alt0()]
            current = rule.current
            return current

    def COMMENT_GENESYS(self, parent=None):
        with UnlexerRuleContext(self, 'COMMENT_GENESYS', parent) as rule:
            current = rule.current
            current.src += '!'
            return current

    def request(self, parent=None):
        with UnparserRuleContext(self, 'request', parent) as rule:
            current = rule.current
            with QuantifierContext(rule, 0, 1, inf, DiceRollingGenerator._quant_sizes[2], 0) as quant0:
                while quant0():
                    with QuantifiedContext(rule):
                        current = rule.current
                        self.diceRoll(parent=current)
            current = rule.current
            with QuantifierContext(rule, 1, 0, 1, DiceRollingGenerator._quant_sizes[3], 0) as quant1:
                while quant1():
                    with QuantifiedContext(rule):
                        current = rule.current
                        self.reason(parent=current)
            current = rule.current
            return current

    def reason(self, parent=None):
        with UnparserRuleContext(self, 'reason', parent) as rule:
            current = rule.current
            self.COMMENT(parent=current)
            with QuantifierContext(rule, 0, 0, inf, DiceRollingGenerator._quant_sizes[1], 0) as quant0:
                while quant0():
                    with QuantifiedContext(rule):
                        current = rule.current
                        self.ANYTHING(parent=current)
            current = rule.current
            return current

    def diceRoll(self, parent=None):
        with UnparserRuleContext(self, 'diceRoll', parent) as rule:
            current = rule.current
            with QuantifierContext(rule, 0, 0, 1, DiceRollingGenerator._quant_sizes[4], 2) as quant0:
                while quant0():
                    with QuantifiedContext(rule):
                        current = rule.current
                        self.multiplier(parent=current)
            current = rule.current
            self.dicerollType(parent=current)
            return current

    def multiplier(self, parent=None):
        with UnparserRuleContext(self, 'multiplier', parent) as rule:
            current = rule.current
            self._reserve(1, self.POSITIVE_INTEGER, parent=current)
            self.COLON(parent=current)
            return current

    def dicerollType(self, parent=None):
        with UnparserRuleContext(self, 'dicerollType', parent) as rule:
            current = rule.current
            with AlternationContext(rule, 0, DiceRollingGenerator._alt_sizes[2], 0, DiceRollingGenerator._alt_conds[0]) as alt0:
                current = rule.current
                [self.arithmetic, self.nonarithmetic][alt0()](parent=current)
            current = rule.current
            return current

    def arithmetic(self, parent=None):
        with UnparserRuleContext(self, 'arithmetic', parent) as rule:
            current = rule.current
            with AlternationContext(rule, 0, DiceRollingGenerator._alt_sizes[3], 0, DiceRollingGenerator._alt_conds[1]) as alt0:
                current = rule.current
                choice0 = alt0()
                if choice0 == 0:
                    self._reserve(3, self.OPENBRACKET, parent=current)
                    self._reserve(1, self.arithmetic, parent=current)
                    self.CLOSEBRACKET(parent=current)
                elif choice0 == 1:
                    self.value(parent=current)
                elif choice0 == 2:
                    self._reserve(3, self.arithmetic, parent=current)
                    self._reserve(2, self.MULTIPLY, parent=current)
                    self.arithmetic(parent=current)
                elif choice0 == 3:
                    self._reserve(3, self.arithmetic, parent=current)
                    self._reserve(2, self.DIVIDE, parent=current)
                    self.arithmetic(parent=current)
                elif choice0 == 4:
                    self._reserve(3, self.arithmetic, parent=current)
                    self._reserve(2, self.PLUS, parent=current)
                    self.arithmetic(parent=current)
                elif choice0 == 5:
                    self._reserve(3, self.arithmetic, parent=current)
                    self._reserve(2, self.MINUS, parent=current)
                    self.arithmetic(parent=current)
                elif choice0 == 6:
                    self._reserve(3, self.arithmetic, parent=current)
                    self._reserve(2, self.MODULO, parent=current)
                    self.arithmetic(parent=current)
            current = rule.current
            return current

    def nonarithmetic(self, parent=None):
        with UnparserRuleContext(self, 'nonarithmetic', parent) as rule:
            current = rule.current
            self._reserve(1, self.SS_GENESYS, parent=current)
            with QuantifierContext(rule, 0, 1, inf, DiceRollingGenerator._quant_sizes[3], 0) as quant0:
                while quant0():
                    with QuantifiedContext(rule):
                        current = rule.current
                        with AlternationContext(rule, 0, DiceRollingGenerator._alt_sizes[4], 0, DiceRollingGenerator._alt_conds[0]) as alt0:
                            current = rule.current
                            [self.genesysDice, self.genesysLiteral][alt0()](parent=current)
                        current = rule.current
            current = rule.current
            return current

    def value(self, parent=None):
        with UnparserRuleContext(self, 'value', parent) as rule:
            current = rule.current
            with AlternationContext(rule, 0, DiceRollingGenerator._alt_sizes[5], 0, DiceRollingGenerator._alt_conds[0]) as alt0:
                current = rule.current
                choice0 = alt0()
                if choice0 == 0:
                    self.dice(parent=current)
                elif choice0 == 1:
                    with QuantifierContext(rule, 0, 0, 1, DiceRollingGenerator._quant_sizes[3], 2) as quant0:
                        while quant0():
                            with QuantifiedContext(rule):
                                current = rule.current
                                self.sign(parent=current)
                    current = rule.current
                    with AlternationContext(rule, 1, DiceRollingGenerator._alt_sizes[6], 0, DiceRollingGenerator._alt_conds[0]) as alt1:
                        current = rule.current
                        [self.DECIMAL, self.POSITIVE_INTEGER][alt1()](parent=current)
                    current = rule.current
            current = rule.current
            return current

    def dice(self, parent=None):
        with UnparserRuleContext(self, 'dice', parent) as rule:
            current = rule.current
            with AlternationContext(rule, 0, DiceRollingGenerator._alt_sizes[7], 0, DiceRollingGenerator._alt_conds[0]) as alt0:
                current = rule.current
                [self.dice_DiceSugar, self.dice_DiceGroup][alt0()](parent=current)
            current = rule.current
            return current

    def groupTarget(self, parent=None):
        with UnparserRuleContext(self, 'groupTarget', parent) as rule:
            current = rule.current
            self._reserve(2, self.KW_TARGET, parent=current)
            self.diceNumber(parent=current)
            with QuantifierContext(rule, 0, 0, 1, DiceRollingGenerator._quant_sizes[3], 0) as quant0:
                while quant0():
                    with QuantifiedContext(rule):
                        current = rule.current
                        self.sign(parent=current)
            current = rule.current
            return current

    def groupKeep(self, parent=None):
        with UnparserRuleContext(self, 'groupKeep', parent) as rule:
            current = rule.current
            self._reserve(3, self.KW_KEEP, parent=current)
            self._reserve(1, self.diceNumber, parent=current)
            self.sign(parent=current)
            return current

    def groupLimit(self, parent=None):
        with UnparserRuleContext(self, 'groupLimit', parent) as rule:
            current = rule.current
            self._reserve(2, self.KW_LIMIT, parent=current)
            self.diceNumber(parent=current)
            return current

    def singleDiceRoll(self, parent=None):
        with UnparserRuleContext(self, 'singleDiceRoll', parent) as rule:
            current = rule.current
            self._reserve(2, self.DICE, parent=current)
            self.diceNumber(parent=current)
            with QuantifierContext(rule, 0, 0, inf, DiceRollingGenerator._quant_sizes[8], 0) as quant0:
                while quant0():
                    with QuantifiedContext(rule):
                        current = rule.current
                        self.diceModifiers(parent=current)
            current = rule.current
            return current

    def diceNumber(self, parent=None):
        with UnparserRuleContext(self, 'diceNumber', parent) as rule:
            current = rule.current
            with AlternationContext(rule, 0, DiceRollingGenerator._alt_sizes[8], 0, DiceRollingGenerator._alt_conds[0]) as alt0:
                current = rule.current
                [self.POSITIVE_INTEGER, self.squaredValue][alt0()](parent=current)
            current = rule.current
            return current

    def squaredValue(self, parent=None):
        with UnparserRuleContext(self, 'squaredValue', parent) as rule:
            current = rule.current
            self._reserve(3, self.SQUARE_OPEN, parent=current)
            self._reserve(1, self.arithmetic, parent=current)
            self.SQUARE_CLOSED(parent=current)
            return current

    def diceModifiers(self, parent=None):
        with UnparserRuleContext(self, 'diceModifiers', parent) as rule:
            current = rule.current
            with AlternationContext(rule, 0, DiceRollingGenerator._alt_sizes[9], 0, DiceRollingGenerator._alt_conds[2]) as alt0:
                current = rule.current
                [self.diceModifiers_DMExplosion, self.diceModifiers_DMIndefiniteExplosion, self.diceModifiers_DMStackingExplosion][alt0()](parent=current)
            current = rule.current
            return current

    def sugarDice(self, parent=None):
        with UnparserRuleContext(self, 'sugarDice', parent) as rule:
            current = rule.current
            with AlternationContext(rule, 0, DiceRollingGenerator._alt_sizes[10], 0, DiceRollingGenerator._alt_conds[3]) as alt0:
                current = rule.current
                [self.sugarDice_SSShadowrun, self.sugarDice_SSOldShadowrun, self.sugarDice_SSEarthdawn, self.sugarDice_SSStarwars][alt0()](parent=current)
            current = rule.current
            return current

    def shadowrunExplode(self, parent=None):
        with UnparserRuleContext(self, 'shadowrunExplode', parent) as rule:
            current = rule.current
            self._reserve(1, self.KW_INDEFINITE, parent=current)
            self.KW_EXPLOSION(parent=current)
            with QuantifierContext(rule, 0, 0, 1, DiceRollingGenerator._quant_sizes[5], 0) as quant0:
                while quant0():
                    with QuantifiedContext(rule):
                        current = rule.current
                        self.diceNumber(parent=current)
            current = rule.current
            with QuantifierContext(rule, 1, 0, 1, DiceRollingGenerator._quant_sizes[3], 0) as quant1:
                while quant1():
                    with QuantifiedContext(rule):
                        current = rule.current
                        self.sign(parent=current)
            current = rule.current
            return current

    def shadowrunLimit(self, parent=None):
        with UnparserRuleContext(self, 'shadowrunLimit', parent) as rule:
            current = rule.current
            self._reserve(2, self.KW_LIMIT, parent=current)
            self.diceNumber(parent=current)
            return current

    def oldShadowrunTarget(self, parent=None):
        with UnparserRuleContext(self, 'oldShadowrunTarget', parent) as rule:
            current = rule.current
            self._reserve(2, self.KW_TARGET, parent=current)
            self.diceNumber(parent=current)
            return current

    def genesysDice(self, parent=None):
        with UnparserRuleContext(self, 'genesysDice', parent) as rule:
            current = rule.current
            with AlternationContext(rule, 0, DiceRollingGenerator._alt_sizes[11], 0, DiceRollingGenerator._alt_conds[4]) as alt0:
                current = rule.current
                [self.YELLOW, self.GREEN, self.BLUE, self.BLACK, self.RED, self.PURPLE][alt0()](parent=current)
            current = rule.current
            return current

    def genesysLiteral(self, parent=None):
        with UnparserRuleContext(self, 'genesysLiteral', parent) as rule:
            current = rule.current
            with AlternationContext(rule, 0, DiceRollingGenerator._alt_sizes[11], 0, DiceRollingGenerator._alt_conds[4]) as alt0:
                current = rule.current
                [self.SUCCESS, self.FAILURE, self.ADVANTAGE, self.THREAT, self.TRIUMPH, self.DESPAIR][alt0()](parent=current)
            current = rule.current
            return current

    def sign(self, parent=None):
        with UnparserRuleContext(self, 'sign', parent) as rule:
            current = rule.current
            with AlternationContext(rule, 0, DiceRollingGenerator._alt_sizes[12], 0, DiceRollingGenerator._alt_conds[0]) as alt0:
                current = rule.current
                [self.PLUS, self.MINUS][alt0()](parent=current)
            current = rule.current
            return current

    def dice_DiceSugar(self, parent=None):
        with UnparserRuleContext(self, 'dice_DiceSugar', parent) as rule:
            current = rule.current
            self.sugarDice(parent=current)
            return current

    def dice_DiceGroup(self, parent=None):
        with UnparserRuleContext(self, 'dice_DiceGroup', parent) as rule:
            current = rule.current
            with QuantifierContext(rule, 0, 0, 1, DiceRollingGenerator._quant_sizes[5], 3) as quant0:
                while quant0():
                    with QuantifiedContext(rule):
                        current = rule.current
                        self.diceNumber(parent=current)
            current = rule.current
            self.singleDiceRoll(parent=current)
            with QuantifierContext(rule, 1, 0, 1, DiceRollingGenerator._quant_sizes[6], 0) as quant1:
                while quant1():
                    with QuantifiedContext(rule):
                        current = rule.current
                        self.groupKeep(parent=current)
            current = rule.current
            with QuantifierContext(rule, 2, 0, 1, DiceRollingGenerator._quant_sizes[7], 0) as quant2:
                while quant2():
                    with QuantifiedContext(rule):
                        current = rule.current
                        self.groupTarget(parent=current)
            current = rule.current
            with QuantifierContext(rule, 3, 0, 1, DiceRollingGenerator._quant_sizes[7], 0) as quant3:
                while quant3():
                    with QuantifiedContext(rule):
                        current = rule.current
                        self.groupLimit(parent=current)
            current = rule.current
            return current

    def diceModifiers_DMExplosion(self, parent=None):
        with UnparserRuleContext(self, 'diceModifiers_DMExplosion', parent) as rule:
            current = rule.current
            self._reserve(2, self.KW_EXPLOSION, parent=current)
            self.diceNumber(parent=current)
            with QuantifierContext(rule, 0, 0, 1, DiceRollingGenerator._quant_sizes[3], 0) as quant0:
                while quant0():
                    with QuantifiedContext(rule):
                        current = rule.current
                        self.sign(parent=current)
            current = rule.current
            return current

    def diceModifiers_DMIndefiniteExplosion(self, parent=None):
        with UnparserRuleContext(self, 'diceModifiers_DMIndefiniteExplosion', parent) as rule:
            current = rule.current
            self._reserve(3, self.KW_INDEFINITE, parent=current)
            self._reserve(2, self.KW_EXPLOSION, parent=current)
            self.diceNumber(parent=current)
            with QuantifierContext(rule, 0, 0, 1, DiceRollingGenerator._quant_sizes[3], 0) as quant0:
                while quant0():
                    with QuantifiedContext(rule):
                        current = rule.current
                        self.sign(parent=current)
            current = rule.current
            return current

    def diceModifiers_DMStackingExplosion(self, parent=None):
        with UnparserRuleContext(self, 'diceModifiers_DMStackingExplosion', parent) as rule:
            current = rule.current
            self._reserve(3, self.KW_STACKING_EXPLOSION, parent=current)
            self._reserve(2, self.KW_EXPLOSION, parent=current)
            self.diceNumber(parent=current)
            with QuantifierContext(rule, 0, 0, 1, DiceRollingGenerator._quant_sizes[3], 0) as quant0:
                while quant0():
                    with QuantifiedContext(rule):
                        current = rule.current
                        self.sign(parent=current)
            current = rule.current
            return current

    def sugarDice_SSShadowrun(self, parent=None):
        with UnparserRuleContext(self, 'sugarDice_SSShadowrun', parent) as rule:
            current = rule.current
            self._reserve(2, self.SS_SHADOWRUN, parent=current)
            self.diceNumber(parent=current)
            with QuantifierContext(rule, 0, 0, 1, DiceRollingGenerator._quant_sizes[9], 0) as quant0:
                while quant0():
                    with QuantifiedContext(rule):
                        current = rule.current
                        self.shadowrunExplode(parent=current)
            current = rule.current
            with QuantifierContext(rule, 1, 0, 1, DiceRollingGenerator._quant_sizes[7], 0) as quant1:
                while quant1():
                    with QuantifiedContext(rule):
                        current = rule.current
                        self.shadowrunLimit(parent=current)
            current = rule.current
            return current

    def sugarDice_SSOldShadowrun(self, parent=None):
        with UnparserRuleContext(self, 'sugarDice_SSOldShadowrun', parent) as rule:
            current = rule.current
            self._reserve(2, self.SS_OLD_SHADOWRUN, parent=current)
            self.diceNumber(parent=current)
            with QuantifierContext(rule, 0, 0, 1, DiceRollingGenerator._quant_sizes[7], 0) as quant0:
                while quant0():
                    with QuantifiedContext(rule):
                        current = rule.current
                        self.oldShadowrunTarget(parent=current)
            current = rule.current
            return current

    def sugarDice_SSEarthdawn(self, parent=None):
        with UnparserRuleContext(self, 'sugarDice_SSEarthdawn', parent) as rule:
            current = rule.current
            self._reserve(2, self.SS_EARTHDAWN, parent=current)
            self.POSITIVE_INTEGER(parent=current)
            return current

    def sugarDice_SSStarwars(self, parent=None):
        with UnparserRuleContext(self, 'sugarDice_SSStarwars', parent) as rule:
            current = rule.current
            self._reserve(2, self.SS_STARWARS, parent=current)
            self.POSITIVE_INTEGER(parent=current)
            with QuantifierContext(rule, 0, 0, 1, DiceRollingGenerator._quant_sizes[1], 0) as quant0:
                while quant0():
                    with QuantifiedContext(rule):
                        current = rule.current
                        self.DICE(parent=current)
            current = rule.current
            return current


    _default_rule = request

    _immutable_rules = ('CLOSEBRACKET', 'COLON', 'COMMENT', 'COMMENT_GENESYS', 'DIVIDE', 'KW_EXPLOSION', 'KW_INDEFINITE', 'KW_KEEP', 'KW_LIMIT', 'KW_STACKING_EXPLOSION', 'KW_TARGET', 'KW_UNSORT', 'MINUS', 'MODULO', 'MULTIPLY', 'OPENBRACKET', 'PLUS', 'POINT', 'SQUARE_CLOSED', 'SQUARE_OPEN', 'SS_EARTHDAWN', 'SS_GENESYS', 'SS_OLD_SHADOWRUN', 'SS_SHADOWRUN', 'SS_STARWARS')

    _rule_sizes = {
        'WHITESPACE': RuleSize(0, 0),
        'POSDIGIT': RuleSize(0, 0),
        'DIGIT': RuleSize(0, 0),
        'POINT': RuleSize(0, 0),
        'SS_SHADOWRUN': RuleSize(0, 0),
        'SS_OLD_SHADOWRUN': RuleSize(0, 0),
        'SS_EARTHDAWN': RuleSize(0, 0),
        'SS_GENESYS': RuleSize(0, 0),
        'SS_STARWARS': RuleSize(0, 0),
        'KW_TARGET': RuleSize(0, 0),
        'KW_INDEFINITE': RuleSize(0, 0),
        'KW_STACKING_EXPLOSION': RuleSize(0, 0),
        'KW_EXPLOSION': RuleSize(0, 0),
        'KW_UNSORT': RuleSize(0, 0),
        'KW_KEEP': RuleSize(0, 0),
        'KW_LIMIT': RuleSize(0, 0),
        'COMMENT': RuleSize(0, 0),
        'OPENBRACKET': RuleSize(0, 0),
        'CLOSEBRACKET': RuleSize(0, 0),
        'SQUARE_OPEN': RuleSize(0, 0),
        'SQUARE_CLOSED': RuleSize(0, 0),
        'PLUS': RuleSize(0, 0),
        'MINUS': RuleSize(0, 0),
        'MULTIPLY': RuleSize(0, 0),
        'DIVIDE': RuleSize(0, 0),
        'MODULO': RuleSize(0, 0),
        'COLON': RuleSize(0, 0),
        'POSITIVE_INTEGER': RuleSize(1, 1),
        'DECIMAL': RuleSize(1, 1),
        'DICE': RuleSize(0, 0),
        'ANYTHING': RuleSize(0, 0),
        'WHITESPACE_GENESYS': RuleSize(0, 0),
        'YELLOW': RuleSize(0, 0),
        'GREEN': RuleSize(0, 0),
        'BLUE': RuleSize(0, 0),
        'BLACK': RuleSize(0, 0),
        'RED': RuleSize(0, 0),
        'PURPLE': RuleSize(0, 0),
        'SUCCESS': RuleSize(0, 0),
        'FAILURE': RuleSize(0, 0),
        'ADVANTAGE': RuleSize(0, 0),
        'THREAT': RuleSize(0, 0),
        'TRIUMPH': RuleSize(0, 0),
        'DESPAIR': RuleSize(0, 0),
        'COMMENT_GENESYS': RuleSize(0, 0),
        'request': RuleSize(5, 2),
        'reason': RuleSize(1, 1),
        'diceRoll': RuleSize(4, 2),
        'multiplier': RuleSize(2, 3),
        'dicerollType': RuleSize(3, 2),
        'arithmetic': RuleSize(3, 2),
        'nonarithmetic': RuleSize(2, 2),
        'value': RuleSize(2, 2),
        'dice': RuleSize(5, 3),
        'groupTarget': RuleSize(3, 3),
        'groupKeep': RuleSize(3, 4),
        'groupLimit': RuleSize(3, 3),
        'singleDiceRoll': RuleSize(3, 3),
        'diceNumber': RuleSize(2, 2),
        'squaredValue': RuleSize(4, 4),
        'diceModifiers': RuleSize(4, 3),
        'sugarDice': RuleSize(3, 3),
        'shadowrunExplode': RuleSize(1, 2),
        'shadowrunLimit': RuleSize(3, 3),
        'oldShadowrunTarget': RuleSize(3, 3),
        'genesysDice': RuleSize(1, 1),
        'genesysLiteral': RuleSize(1, 1),
        'sign': RuleSize(1, 1),
        'dice_DiceSugar': RuleSize(4, 3),
        'dice_DiceGroup': RuleSize(4, 3),
        'diceModifiers_DMExplosion': RuleSize(3, 3),
        'diceModifiers_DMIndefiniteExplosion': RuleSize(3, 4),
        'diceModifiers_DMStackingExplosion': RuleSize(3, 4),
        'sugarDice_SSShadowrun': RuleSize(3, 3),
        'sugarDice_SSOldShadowrun': RuleSize(3, 3),
        'sugarDice_SSEarthdawn': RuleSize(2, 3),
        'sugarDice_SSStarwars': RuleSize(2, 3),
    }

    _alt_sizes = (
        (RuleSize(1, 1), RuleSize(1, 2)),  # 0
        (RuleSize(0, 0), RuleSize(0, 0)),  # 1
        (RuleSize(4, 2), RuleSize(3, 2)),  # 2
        (RuleSize(4, 4), RuleSize(3, 2), RuleSize(4, 5), RuleSize(4, 5), RuleSize(4, 5), RuleSize(4, 5), RuleSize(4, 5)),  # 3
        (RuleSize(2, 1), RuleSize(2, 1)),  # 4
        (RuleSize(6, 3), RuleSize(2, 2)),  # 5
        (RuleSize(2, 2), RuleSize(2, 2)),  # 6
        (RuleSize(5, 3), RuleSize(5, 3)),  # 7
        (RuleSize(2, 2), RuleSize(5, 4)),  # 8
        (RuleSize(4, 3), RuleSize(4, 4), RuleSize(4, 4)),  # 9
        (RuleSize(4, 3), RuleSize(4, 3), RuleSize(3, 3), RuleSize(3, 3)),  # 10
        (RuleSize(1, 1), RuleSize(1, 1), RuleSize(1, 1), RuleSize(1, 1), RuleSize(1, 1), RuleSize(1, 1)),  # 11
        (RuleSize(1, 1), RuleSize(1, 1)),  # 12
    )

    _alt_conds = (
        (1, 1),  # 0
        (1, 1, 1, 1, 1, 1, 1),  # 1
        (1, 1, 1),  # 2
        (1, 1, 1, 1),  # 3
        (1, 1, 1, 1, 1, 1),  # 4
    )

    _quant_sizes = (
        RuleSize(0, 0),  # 0
        RuleSize(1, 1),  # 1
        RuleSize(5, 2),  # 2
        RuleSize(2, 1),  # 3
        RuleSize(3, 3),  # 4
        RuleSize(3, 2),  # 5
        RuleSize(4, 4),  # 6
        RuleSize(4, 3),  # 7
        RuleSize(5, 3),  # 8
        RuleSize(2, 2),  # 9
    )

    _charsets = (
        Generator._charset(((0x20, 0x7f), )),  # 0
        Generator._charset(((0x31, 0x3a), )),  # 1
        Generator._charset(((0x30, 0x3a), )),  # 2
    )
