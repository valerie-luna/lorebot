// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Weather.Context;

#nullable disable

namespace Weather.WeatherDatabase.Migrations
{
    [DbContext(typeof(WeatherContext))]
    partial class WeatherContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Weather.Context.WeatherNameEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("WeatherSettingsId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.HasIndex("WeatherSettingsId");

                    b.ToTable("Names");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "tromso",
                            WeatherSettingsId = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "tromsø",
                            WeatherSettingsId = 1
                        },
                        new
                        {
                            Id = 3,
                            Name = "melbourne",
                            WeatherSettingsId = 2
                        },
                        new
                        {
                            Id = 4,
                            Name = "seattle",
                            WeatherSettingsId = 3
                        },
                        new
                        {
                            Id = 5,
                            Name = "berlin",
                            WeatherSettingsId = 4
                        });
                });

            modelBuilder.Entity("Weather.Context.WeatherSettingsEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CanonicalName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("WeatherSettings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CanonicalName = "Tromsø"
                        },
                        new
                        {
                            Id = 2,
                            CanonicalName = "Melbourne"
                        },
                        new
                        {
                            Id = 3,
                            CanonicalName = "Seattle"
                        },
                        new
                        {
                            Id = 4,
                            CanonicalName = "Berlin"
                        });
                });

            modelBuilder.Entity("Weather.Context.WeatherNameEntity", b =>
                {
                    b.HasOne("Weather.Context.WeatherSettingsEntity", "Settings")
                        .WithMany()
                        .HasForeignKey("WeatherSettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Settings");
                });

            modelBuilder.Entity("Weather.Context.WeatherSettingsEntity", b =>
                {
                    b.OwnsOne("Weather.Context.NormalDistribution", "AirPressure", b1 =>
                        {
                            b1.Property<int>("WeatherSettingsEntityId")
                                .HasColumnType("integer");

                            b1.Property<double>("Mean")
                                .HasColumnType("double precision");

                            b1.Property<double>("StandardDeviation")
                                .HasColumnType("double precision");

                            b1.HasKey("WeatherSettingsEntityId");

                            b1.ToTable("WeatherSettings");

                            b1.WithOwner()
                                .HasForeignKey("WeatherSettingsEntityId");

                            b1.HasData(
                                new
                                {
                                    WeatherSettingsEntityId = 1,
                                    Mean = 1004.1,
                                    StandardDeviation = 10.0
                                },
                                new
                                {
                                    WeatherSettingsEntityId = 2,
                                    Mean = 1016.1,
                                    StandardDeviation = 20.0
                                },
                                new
                                {
                                    WeatherSettingsEntityId = 3,
                                    Mean = 1017.1,
                                    StandardDeviation = 12.0
                                },
                                new
                                {
                                    WeatherSettingsEntityId = 4,
                                    Mean = 1015.1,
                                    StandardDeviation = 15.0
                                });
                        });

                    b.OwnsOne("Weather.Context.NormalDistribution", "AirQuality", b1 =>
                        {
                            b1.Property<int>("WeatherSettingsEntityId")
                                .HasColumnType("integer");

                            b1.Property<double>("Mean")
                                .HasColumnType("double precision");

                            b1.Property<double>("StandardDeviation")
                                .HasColumnType("double precision");

                            b1.HasKey("WeatherSettingsEntityId");

                            b1.ToTable("WeatherSettings");

                            b1.WithOwner()
                                .HasForeignKey("WeatherSettingsEntityId");

                            b1.HasData(
                                new
                                {
                                    WeatherSettingsEntityId = 1,
                                    Mean = 15.0,
                                    StandardDeviation = 20.0
                                },
                                new
                                {
                                    WeatherSettingsEntityId = 2,
                                    Mean = 50.0,
                                    StandardDeviation = 45.0
                                },
                                new
                                {
                                    WeatherSettingsEntityId = 3,
                                    Mean = 75.0,
                                    StandardDeviation = 75.0
                                },
                                new
                                {
                                    WeatherSettingsEntityId = 4,
                                    Mean = 65.0,
                                    StandardDeviation = 65.0
                                });
                        });

                    b.OwnsOne("Weather.Context.NormalDistribution", "CloudyMod", b1 =>
                        {
                            b1.Property<int>("WeatherSettingsEntityId")
                                .HasColumnType("integer");

                            b1.Property<double>("Mean")
                                .HasColumnType("double precision");

                            b1.Property<double>("StandardDeviation")
                                .HasColumnType("double precision");

                            b1.HasKey("WeatherSettingsEntityId");

                            b1.ToTable("WeatherSettings");

                            b1.WithOwner()
                                .HasForeignKey("WeatherSettingsEntityId");

                            b1.HasData(
                                new
                                {
                                    WeatherSettingsEntityId = 1,
                                    Mean = -15.0,
                                    StandardDeviation = 20.0
                                },
                                new
                                {
                                    WeatherSettingsEntityId = 2,
                                    Mean = 20.0,
                                    StandardDeviation = 20.0
                                },
                                new
                                {
                                    WeatherSettingsEntityId = 3,
                                    Mean = 40.0,
                                    StandardDeviation = 20.0
                                },
                                new
                                {
                                    WeatherSettingsEntityId = 4,
                                    Mean = -5.0,
                                    StandardDeviation = 5.0
                                });
                        });

                    b.OwnsOne("Weather.Context.NormalDistribution", "Humidity", b1 =>
                        {
                            b1.Property<int>("WeatherSettingsEntityId")
                                .HasColumnType("integer");

                            b1.Property<double>("Mean")
                                .HasColumnType("double precision");

                            b1.Property<double>("StandardDeviation")
                                .HasColumnType("double precision");

                            b1.HasKey("WeatherSettingsEntityId");

                            b1.ToTable("WeatherSettings");

                            b1.WithOwner()
                                .HasForeignKey("WeatherSettingsEntityId");

                            b1.HasData(
                                new
                                {
                                    WeatherSettingsEntityId = 1,
                                    Mean = 84.0,
                                    StandardDeviation = 20.0
                                },
                                new
                                {
                                    WeatherSettingsEntityId = 2,
                                    Mean = 44.0,
                                    StandardDeviation = 20.0
                                },
                                new
                                {
                                    WeatherSettingsEntityId = 3,
                                    Mean = 73.0,
                                    StandardDeviation = 10.0
                                },
                                new
                                {
                                    WeatherSettingsEntityId = 4,
                                    Mean = 87.0,
                                    StandardDeviation = 10.0
                                });
                        });

                    b.OwnsOne("Weather.Context.NormalDistribution", "ManaLevel", b1 =>
                        {
                            b1.Property<int>("WeatherSettingsEntityId")
                                .HasColumnType("integer");

                            b1.Property<double>("Mean")
                                .HasColumnType("double precision");

                            b1.Property<double>("StandardDeviation")
                                .HasColumnType("double precision");

                            b1.HasKey("WeatherSettingsEntityId");

                            b1.ToTable("WeatherSettings");

                            b1.WithOwner()
                                .HasForeignKey("WeatherSettingsEntityId");

                            b1.HasData(
                                new
                                {
                                    WeatherSettingsEntityId = 1,
                                    Mean = 50.0,
                                    StandardDeviation = 30.0
                                },
                                new
                                {
                                    WeatherSettingsEntityId = 2,
                                    Mean = 30.0,
                                    StandardDeviation = 30.0
                                },
                                new
                                {
                                    WeatherSettingsEntityId = 3,
                                    Mean = 20.0,
                                    StandardDeviation = 25.0
                                },
                                new
                                {
                                    WeatherSettingsEntityId = 4,
                                    Mean = 40.0,
                                    StandardDeviation = 25.0
                                });
                        });

                    b.OwnsOne("Weather.Context.NormalDistribution", "Temperature", b1 =>
                        {
                            b1.Property<int>("WeatherSettingsEntityId")
                                .HasColumnType("integer");

                            b1.Property<double>("Mean")
                                .HasColumnType("double precision");

                            b1.Property<double>("StandardDeviation")
                                .HasColumnType("double precision");

                            b1.HasKey("WeatherSettingsEntityId");

                            b1.ToTable("WeatherSettings");

                            b1.WithOwner()
                                .HasForeignKey("WeatherSettingsEntityId");

                            b1.HasData(
                                new
                                {
                                    WeatherSettingsEntityId = 1,
                                    Mean = -3.0,
                                    StandardDeviation = 3.0
                                },
                                new
                                {
                                    WeatherSettingsEntityId = 2,
                                    Mean = 20.600000000000001,
                                    StandardDeviation = 7.0
                                },
                                new
                                {
                                    WeatherSettingsEntityId = 3,
                                    Mean = 12.1,
                                    StandardDeviation = 4.2999999999999998
                                },
                                new
                                {
                                    WeatherSettingsEntityId = 4,
                                    Mean = 13.0,
                                    StandardDeviation = 5.0
                                });
                        });

                    b.OwnsOne("Weather.Context.NormalDistribution", "Windspeed", b1 =>
                        {
                            b1.Property<int>("WeatherSettingsEntityId")
                                .HasColumnType("integer");

                            b1.Property<double>("Mean")
                                .HasColumnType("double precision");

                            b1.Property<double>("StandardDeviation")
                                .HasColumnType("double precision");

                            b1.HasKey("WeatherSettingsEntityId");

                            b1.ToTable("WeatherSettings");

                            b1.WithOwner()
                                .HasForeignKey("WeatherSettingsEntityId");

                            b1.HasData(
                                new
                                {
                                    WeatherSettingsEntityId = 1,
                                    Mean = 16.899999999999999,
                                    StandardDeviation = 10.0
                                },
                                new
                                {
                                    WeatherSettingsEntityId = 2,
                                    Mean = 9.0,
                                    StandardDeviation = 10.0
                                },
                                new
                                {
                                    WeatherSettingsEntityId = 3,
                                    Mean = 14.199999999999999,
                                    StandardDeviation = 8.0
                                },
                                new
                                {
                                    WeatherSettingsEntityId = 4,
                                    Mean = 14.199999999999999,
                                    StandardDeviation = 5.0
                                });
                        });

                    b.Navigation("AirPressure")
                        .IsRequired();

                    b.Navigation("AirQuality")
                        .IsRequired();

                    b.Navigation("CloudyMod")
                        .IsRequired();

                    b.Navigation("Humidity")
                        .IsRequired();

                    b.Navigation("ManaLevel")
                        .IsRequired();

                    b.Navigation("Temperature")
                        .IsRequired();

                    b.Navigation("Windspeed")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
